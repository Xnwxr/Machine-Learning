{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "48c40fa8-4393-403b-8b78-1dd887a8e592",
   "metadata": {},
   "source": [
    "# Manufacturing Defect Project\n",
    "## This project is about classifying and studying defects within a manufacturing site\n",
    "### My first ML Project\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "8eae00f2-fe86-4a79-996e-c1491c131d49",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "5541c471-5cce-4eed-81b3-88739e6f5058",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('defects_data.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26e7ce33-55ea-4463-bc24-73eac2dfa752",
   "metadata": {},
   "source": [
    "## The following table below shows defect information for the site"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "be312ee6-7410-4322-8620-4fadae526d1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>defect_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>defect_type</th>\n",
       "      <th>defect_date</th>\n",
       "      <th>defect_location</th>\n",
       "      <th>severity</th>\n",
       "      <th>inspection_method</th>\n",
       "      <th>repair_cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>Structural</td>\n",
       "      <td>6/6/2024</td>\n",
       "      <td>Component</td>\n",
       "      <td>Minor</td>\n",
       "      <td>Visual Inspection</td>\n",
       "      <td>245.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>Functional</td>\n",
       "      <td>4/26/2024</td>\n",
       "      <td>Component</td>\n",
       "      <td>Minor</td>\n",
       "      <td>Visual Inspection</td>\n",
       "      <td>26.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>84</td>\n",
       "      <td>Structural</td>\n",
       "      <td>2/15/2024</td>\n",
       "      <td>Internal</td>\n",
       "      <td>Minor</td>\n",
       "      <td>Automated Testing</td>\n",
       "      <td>835.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>Functional</td>\n",
       "      <td>3/28/2024</td>\n",
       "      <td>Internal</td>\n",
       "      <td>Critical</td>\n",
       "      <td>Automated Testing</td>\n",
       "      <td>444.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>14</td>\n",
       "      <td>Cosmetic</td>\n",
       "      <td>4/26/2024</td>\n",
       "      <td>Component</td>\n",
       "      <td>Minor</td>\n",
       "      <td>Manual Testing</td>\n",
       "      <td>823.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>17</td>\n",
       "      <td>Functional</td>\n",
       "      <td>5/11/2024</td>\n",
       "      <td>Internal</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>Visual Inspection</td>\n",
       "      <td>788.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>85</td>\n",
       "      <td>Cosmetic</td>\n",
       "      <td>5/23/2024</td>\n",
       "      <td>Internal</td>\n",
       "      <td>Critical</td>\n",
       "      <td>Manual Testing</td>\n",
       "      <td>33.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>90</td>\n",
       "      <td>Structural</td>\n",
       "      <td>1/15/2024</td>\n",
       "      <td>Internal</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>Manual Testing</td>\n",
       "      <td>65.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>Structural</td>\n",
       "      <td>1/26/2024</td>\n",
       "      <td>Component</td>\n",
       "      <td>Critical</td>\n",
       "      <td>Manual Testing</td>\n",
       "      <td>848.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>20</td>\n",
       "      <td>Structural</td>\n",
       "      <td>6/5/2024</td>\n",
       "      <td>Component</td>\n",
       "      <td>Critical</td>\n",
       "      <td>Visual Inspection</td>\n",
       "      <td>478.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   defect_id  product_id defect_type defect_date defect_location  severity  \\\n",
       "0          1          15  Structural    6/6/2024       Component     Minor   \n",
       "1          2           6  Functional   4/26/2024       Component     Minor   \n",
       "2          3          84  Structural   2/15/2024        Internal     Minor   \n",
       "3          4          10  Functional   3/28/2024        Internal  Critical   \n",
       "4          5          14    Cosmetic   4/26/2024       Component     Minor   \n",
       "5          6          17  Functional   5/11/2024        Internal  Moderate   \n",
       "6          7          85    Cosmetic   5/23/2024        Internal  Critical   \n",
       "7          8          90  Structural   1/15/2024        Internal  Moderate   \n",
       "8          9          30  Structural   1/26/2024       Component  Critical   \n",
       "9         10          20  Structural    6/5/2024       Component  Critical   \n",
       "\n",
       "   inspection_method  repair_cost  \n",
       "0  Visual Inspection       245.47  \n",
       "1  Visual Inspection        26.87  \n",
       "2  Automated Testing       835.81  \n",
       "3  Automated Testing       444.47  \n",
       "4     Manual Testing       823.64  \n",
       "5  Visual Inspection       788.11  \n",
       "6     Manual Testing        33.68  \n",
       "7     Manual Testing        65.56  \n",
       "8     Manual Testing       848.61  \n",
       "9  Visual Inspection       478.48  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10) #shows the first 5 rows of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "ac2513f8-947b-486b-9f15-bcfbe9a76c6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "defect_type = df['defect_type']\n",
    "defect_location = df['defect_location']\n",
    "inspection_method = df['inspection_method']\n",
    "product_id = df['product_id']\n",
    "repair_cost = df['repair_cost']\n",
    "severity = df['severity']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "25f49b66-e661-4871-b202-3a296dc1bdbe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='severity', y='repair_cost', data=df)\n",
    "plt.title(\"Repair Cost vs Severity\")\n",
    "plt.xlabel(\"Severity\")\n",
    "plt.ylabel(\"Repair Cost\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "aaef6daf-147d-4689-a92b-fae69901ebe9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(800, 5)\n",
      "(200, 5)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Select the features and target variable\n",
    "features = ['defect_type', 'defect_location', 'inspection_method', 'repair_cost', 'product_id']\n",
    "target = 'severity'\n",
    "\n",
    "# Split the dataset into training and testing sets (80% training, 20% testing)\n",
    "X_train, X_test, y_train, y_test = train_test_split(df[features], df[target], test_size=0.2, random_state=42)\n",
    "\n",
    "# Check the shape of the split data\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "7b5bd670-c9bf-464b-991f-a68657d3f8da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.35\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "import pandas as pd\n",
    "\n",
    "# Ensure all column names are strings\n",
    "X.columns = X.columns.astype(str)\n",
    "\n",
    "# Proceed with splitting and model training\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, df[target], test_size=0.2, random_state=42)\n",
    "\n",
    "# Train the Logistic Regression model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "model = LogisticRegression(max_iter=1000)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the test set\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Evaluate accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3efe845a-db32-485c-8bf5-67e1689507ef",
   "metadata": {},
   "source": [
    "# Conclusion\n",
    "## we get an accuracy of 35% using a logistic regression model to determine how well this model is at correctly predicting the severity of the defects in the test data. Reason for such a low accuracy can stem from not setting up a model complex enough to handle the data set\n",
    "\n",
    "## next steps to improve on this is to try a more complex model such as Random Forest for example\n",
    "## Can consider adding or transforming features to make them more predictive"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
